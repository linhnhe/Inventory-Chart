# scale_color_brewer(palette='Set1') +
labs(title = "Truck fill rate for 20 tons truck\n", x = "Distributor (km)", y = "Fill rate", color = "Channel\n") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
gg.trans5
gg.trans5
gg.trans5 <- ggplot(transport5.chart, aes(x = Distributor, y = FillRate, fill = Channel)) +
geom_boxplot(alpha=0.7) +
scale_fill_brewer(palette = "Accent") +
labs(title = "Truck fill rate for 20 tons truck\n", x = "Distributor (km)", y = "Fill rate", color = "Channel\n") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
gg.trans5
gg.trans5
gg.trans5 <- ggplot(transport5.chart, aes(x = Distributor, y = FillRate, fill = Channel)) +
geom_boxplot(alpha=0.7) +
scale_fill_brewer(palette = "Red") +
labs(title = "Truck fill rate for 20 tons truck\n", x = "Distributor (km)", y = "Fill rate", color = "Channel\n") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
gg.trans5
gg.trans5 <- ggplot(transport5.chart, aes(x = Distributor, y = FillRate, fill = Channel)) +
geom_boxplot(alpha=0.7) +
scale_fill_brewer(palette = "Reds") +
labs(title = "Truck fill rate for 20 tons truck\n", x = "Distributor (km)", y = "Fill rate", color = "Channel\n") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
gg.trans5
gg.trans5 <- ggplot(transport5.chart, aes(x = Distributor, y = FillRate, fill = Channel)) +
geom_boxplot(alpha=0.7) +
scale_fill_brewer(palette = "YIOrRd") +
labs(title = "Truck fill rate for 20 tons truck\n", x = "Distributor (km)", y = "Fill rate", color = "Channel\n") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
gg.trans5
gg.trans5 <- ggplot(transport5.chart, aes(x = Distributor, y = FillRate, fill = Channel)) +
geom_boxplot(alpha=0.7) +
scale_fill_brewer(palette = "Spectral") +
labs(title = "Truck fill rate for 20 tons truck\n", x = "Distributor (km)", y = "Fill rate", color = "Channel\n") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
gg.trans5
gg.trans5 <- ggplot(transport5.chart, aes(x = Distributor, y = FillRate, fill = Channel)) +
geom_boxplot(alpha=0.7) +
scale_fill_brewer(palette = "YIOrBd") +
labs(title = "Truck fill rate for 20 tons truck\n", x = "Distributor (km)", y = "Fill rate", color = "Channel\n") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
gg.trans5
gg.trans5 <- ggplot(transport5.chart, aes(x = Distributor, y = FillRate, fill = Channel)) +
geom_boxplot(alpha=0.7) +
scale_fill_brewer(palette = "Greys") +
labs(title = "Truck fill rate for 20 tons truck\n", x = "Distributor (km)", y = "Fill rate", color = "Channel\n") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
gg.trans5
gg.trans5 <- ggplot(transport5.chart, aes(x = Distributor, y = FillRate, fill = Channel)) +
geom_boxplot(alpha=0.7) +
scale_fill_brewer(palette = "OrRd") +
labs(title = "Truck fill rate for 20 tons truck\n", x = "Distributor (km)", y = "Fill rate", color = "Channel\n") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
gg.trans5
gg.trans5 <- ggplot(transport5.chart, aes(x = Distributor, y = FillRate, fill = Channel)) +
geom_boxplot(alpha=0.7) +
scale_fill_brewer(palette = "Dark2") +
labs(title = "Truck fill rate for 20 tons truck\n", x = "Distributor (km)", y = "Fill rate", color = "Channel\n") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
gg.trans5
gg.trans5 <- ggplot(transport5.chart, aes(x = Distributor, y = FillRate, fill = Channel)) +
geom_boxplot(alpha=0.7) +
scale_fill_brewer(palette = "Paired") +
labs(title = "Truck fill rate for 20 tons truck\n", x = "Distributor (km)", y = "Fill rate", color = "Channel\n") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
gg.trans5
gg.trans5 <- ggplot(transport5.chart, aes(x = Distributor, y = FillRate, fill = Channel)) +
geom_boxplot(alpha=0.7) +
scale_fill_brewer(palette = "Set1") +
labs(title = "Truck fill rate for 20 tons truck\n", x = "Distributor (km)", y = "Fill rate", color = "Channel\n") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
gg.trans5
ggplot_dual_axis = function(plot1, plot2, which.axis = "x") {
# Update plot with transparent panel
plot2 = plot2 + theme(panel.background = element_rect(fill = NA))
grid.newpage()
# Increase right margin if which.axis == "y"
if(which.axis == "y") plot1 = plot1 + theme(plot.margin = unit(c(0.7, 1.5, 0.4, 0.4), "cm"))
# Extract gtable
g1 = ggplot_gtable(ggplot_build(plot1))
g2 = ggplot_gtable(ggplot_build(plot2))
# Overlap the panel of the second plot on that of the first
pp = c(subset(g1$layout, name == "panel", se = t:r))
g = gtable_add_grob(g1, g2$grobs[[which(g2$layout$name=="panel")]], pp$t, pp$l, pp$b, pp$l)
# Steal axis from second plot and modify
axis.lab = ifelse(which.axis == "x", "axis-b", "axis-l")
ia = which(g2$layout$name == axis.lab)
ga = g2$grobs[[ia]]
ax = ga$children[[2]]
# Switch position of ticks and labels
if(which.axis == "x") ax$heights = rev(ax$heights) else ax$widths = rev(ax$widths)
ax$grobs = rev(ax$grobs)
if(which.axis == "x")
ax$grobs[[2]]$y = ax$grobs[[2]]$y - unit(1, "npc") + unit(0.15, "cm") else
ax$grobs[[1]]$x = ax$grobs[[1]]$x - unit(1, "npc") + unit(0.15, "cm")
# Modify existing row to be tall enough for axis
if(which.axis == "x") g$heights[[2]] = g$heights[g2$layout[ia,]$t]
# Add new row or column for axis label
if(which.axis == "x") {
g = gtable_add_grob(g, ax, 2, 4, 2, 4)
g = gtable_add_rows(g, g2$heights[1], 1)
g = gtable_add_grob(g, g2$grob[[6]], 2, 4, 2, 4)
} else {
g = gtable_add_cols(g, g2$widths[g2$layout[ia, ]$l], length(g$widths) - 1)
g = gtable_add_grob(g, ax, pp$t, length(g$widths) - 1, pp$b)
g = gtable_add_grob(g, g2$grob[[7]], pp$t, length(g$widths), pp$b - 1)
}
# Draw it
grid.draw(g)
}
data.add.x = data.frame(
y1 = runif(100, 0, 100),
x1 = runif(100, 0, 100)
)
View(data.add.x)
data.add.x$y2 = (data.add.x$y^0.5) / 500
plot1.y = qplot(y = y1, x = x1, data = data.add.x)
plot2.y = qplot(y = y2, x = x1, data = data.add.x)
plot1.y
plot2.y
ggplot_dual_axis(plot1.y, plot2.y, "y")
install.packages("gtable")
install.packages("gtable")
install.packages("gtable")
install.packages("gtable")
library(gtable)
install.packages("grid")
install.packages("grid")
install.packages("grid")
install.packages("grid")
library(grid)
ggplot_dual_axis = function(plot1, plot2, which.axis = "x") {
# Update plot with transparent panel
plot2 = plot2 + theme(panel.background = element_rect(fill = NA))
grid.newpage()
# Increase right margin if which.axis == "y"
if(which.axis == "y") plot1 = plot1 + theme(plot.margin = unit(c(0.7, 1.5, 0.4, 0.4), "cm"))
# Extract gtable
g1 = ggplot_gtable(ggplot_build(plot1))
g2 = ggplot_gtable(ggplot_build(plot2))
# Overlap the panel of the second plot on that of the first
pp = c(subset(g1$layout, name == "panel", se = t:r))
g = gtable_add_grob(g1, g2$grobs[[which(g2$layout$name=="panel")]], pp$t, pp$l, pp$b, pp$l)
# Steal axis from second plot and modify
axis.lab = ifelse(which.axis == "x", "axis-b", "axis-l")
ia = which(g2$layout$name == axis.lab)
ga = g2$grobs[[ia]]
ax = ga$children[[2]]
# Switch position of ticks and labels
if(which.axis == "x") ax$heights = rev(ax$heights) else ax$widths = rev(ax$widths)
ax$grobs = rev(ax$grobs)
if(which.axis == "x")
ax$grobs[[2]]$y = ax$grobs[[2]]$y - unit(1, "npc") + unit(0.15, "cm") else
ax$grobs[[1]]$x = ax$grobs[[1]]$x - unit(1, "npc") + unit(0.15, "cm")
# Modify existing row to be tall enough for axis
if(which.axis == "x") g$heights[[2]] = g$heights[g2$layout[ia,]$t]
# Add new row or column for axis label
if(which.axis == "x") {
g = gtable_add_grob(g, ax, 2, 4, 2, 4)
g = gtable_add_rows(g, g2$heights[1], 1)
g = gtable_add_grob(g, g2$grob[[6]], 2, 4, 2, 4)
} else {
g = gtable_add_cols(g, g2$widths[g2$layout[ia, ]$l], length(g$widths) - 1)
g = gtable_add_grob(g, ax, pp$t, length(g$widths) - 1, pp$b)
g = gtable_add_grob(g, g2$grob[[7]], pp$t, length(g$widths), pp$b - 1)
}
# Draw it
grid.draw(g)
}
ggplot_dual_axis(plot1.y, plot2.y, "y")
library(flexdashboard)
library(highcharter)
library(data.table)
library(dplyr)
library(kableExtra)
library(knitr)
library(ggplot2)
ggplot_dual_axis(plot1.y, plot2.y, "y")
library(ggplot2)
library(gtable)
library(grid)
grid.newpage()
# two plots
p1 <- ggplot(mtcars, aes(mpg, disp)) + geom_line(colour = "blue") + theme_bw()
p2 <- ggplot(mtcars, aes(mpg, drat)) + geom_line(colour = "red") + theme_bw() %+replace%
theme(panel.background = element_rect(fill = NA))
# extract gtable
g1 <- ggplot_gtable(ggplot_build(p1))
g2 <- ggplot_gtable(ggplot_build(p2))
# overlap the panel of 2nd plot on that of 1st plot
pp <- c(subset(g1$layout, name == "panel", se = t:r))
g <- gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == "panel")]], pp$t,
pp$l, pp$b, pp$l)
# axis tweaks
ia <- which(g2$layout$name == "axis-l")
ga <- g2$grobs[[ia]]
ax <- ga$children[[2]]
ax$widths <- rev(ax$widths)
ax$grobs <- rev(ax$grobs)
ax$grobs[[1]]$x <- ax$grobs[[1]]$x - unit(1, "npc") + unit(0.15, "cm")
g <- gtable_add_cols(g, g2$widths[g2$layout[ia, ]$l], length(g$widths) - 1)
g <- gtable_add_grob(g, ax, pp$t, length(g$widths) - 1, pp$b)
# draw it
grid.draw(g)
transport6.chart <- fread("Shipment size 1.csv")
gg.trans6 <- ggplot(transport6.chart, aes(x = Distributor, y = ShipmentSize)) +
geom_boxplot(alpha=0.7) +
scale_fill_brewer(palette = "Set1") +
labs(title = "Shipment size per distributor\n", x = "Distributor", y = "Fill rate") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
gg.trans6
gg.trans6
sales.contribution <- fread("Sales contribution.csv")
help("rank")
help("rank")
test <- rank(c(3,5,5,1,6,7))
test
sales.contribution <- sales.contribution[order(sales.contribution$SalesContribution, decreasing = TRUE),]
View(sales.contribution)
sales.contribution$CumulativeSalesContribution <- cumsum(sales.contribution$SalesContribution)
for (i in 1:nrow(sales.contribution)){
sales.contribution$Rank[i] <- i
}
transport6.chart <- merge(transport6.chart, sales.contribution, by = Distributor, all.x = TRUE)
View(transport6.chart)
transport6.chart <- merge(x = transport6.chart, y = sales.contribution, by = Distributor, all.x = TRUE)
help(merge)
transport6.chart <- merge(x = transport6.chart, y = sales.contribution, by = "Distributor", all.x = TRUE)
transport6.chart <- transport6.chart[order(transport6.chart$Rank, decreasing = TRUE),]
transport6.chart <- transport6.chart[order(transport6.chart$Rank, decreasing = FALSE),]
gg.trans6 <- ggplot(transport6.chart, aes(x = Distributor, y = ShipmentSize)) +
geom_boxplot(alpha=0.7) +
scale_fill_brewer(palette = "Set1") +
labs(title = "Shipment size per distributor\n", x = "Distributor", y = "Fill rate") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
gg.trans6
gg.trans6
transport6.chart$Distributor = factor(transport6.chart$Distributor,sales.contribution$Distributor)
gg.trans6 <- ggplot(transport6.chart, aes(x = Distributor, y = ShipmentSize)) +
geom_boxplot(alpha=0.7) +
scale_fill_brewer(palette = "Set1") +
labs(title = "Shipment size per distributor\n", x = "Distributor", y = "Fill rate") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
gg.trans6
transport6.chart <- fread("Shipment size 1.csv")
sales.contribution <- fread("Sales contribution.csv")
sales.contribution <- sales.contribution[order(sales.contribution$SalesContribution, decreasing = TRUE),]
sales.contribution$CumulativeSalesContribution <- cumsum(sales.contribution$SalesContribution)
transport6.chart$Distributor = factor(transport6.chart$Distributor,sales.contribution$Distributor)
gg.trans6 <- ggplot(transport6.chart, aes(x = Distributor, y = ShipmentSize)) +
geom_boxplot(alpha=0.7) +
scale_fill_brewer(palette = "Set1") +
labs(title = "Shipment size per distributor\n", x = "Distributor", y = "Fill rate") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
gg.trans6
gg.sales <- ggplot(sales.contribution, aes(x = Distributor, y = CumulativeSalesContribution)) +
geom_line(color = "Red", size = 1)
gg.sales
gg.sales <- ggplot(sales.contribution, aes(x = Distributor, y = CumulativeSalesContribution))
gg.sales
gg.sales <- ggplot(sales.contribution, aes(x = Distributor, y = CumulativeSalesContribution)) +
geom_line()
gg.sales
gg.sales <- ggplot(data = sales.contribution, aes(x = Distributor, y = CumulativeSalesContribution)) +
geom_line()
gg.sales
View(sales.contribution)
gg.sales <- ggplot(data = sales.contribution, aes(x = Distributor, y = SalesContribution)) +
geom_line()
gg.sales
library(readr)
inventory <- read_csv("inventory_data.csv")
inventory <- as.data.frame(inventory)
inventory$Date  <- as.Date(inventory$Date,format = "%Y-%m-%d")
inventory$Expiration.Date  <- as.Date(inventory$Expiration.Date,format = "%Y-%m-%d")
inventory$Expiration.Text <- as.character(inventory$Expiration.Date)
# Calculate days to expiry
inventory$Days.To.Expiry <- inventory$Expiration.Date - inventory$Date
inventory$Days.To.Expiry <- as.numeric(inventory$Days.To.Expiry)
# Extract the SKU
test <- subset(inventory, SKU==112991)
test <- test[order(test$Expiration.Date, test$Date, decreasing = F),]
setwd("/run/media/linhnguyen/DATA/Google Drive/R development/Inventory charts")
library(readr)
inventory <- read_csv("inventory_data.csv")
inventory <- as.data.frame(inventory)
inventory$Date  <- as.Date(inventory$Date,format = "%Y-%m-%d")
inventory$Expiration.Date  <- as.Date(inventory$Expiration.Date,format = "%Y-%m-%d")
inventory$Expiration.Text <- as.character(inventory$Expiration.Date)
# Calculate days to expiry
inventory$Days.To.Expiry <- inventory$Expiration.Date - inventory$Date
inventory$Days.To.Expiry <- as.numeric(inventory$Days.To.Expiry)
# Extract the SKU
test <- subset(inventory, SKU==112991)
test <- test[order(test$Expiration.Date, test$Date, decreasing = F),]
sku.list <- unique(inventory$SKU)
## First SKU
test <- subset(inventory, SKU==sku.list[1])
test <- test[order(test$Expiration.Date, test$Date, decreasing = F),]
data.unique <- unique(test$Expiration.Date)
# Draw the first batch
inv.batch1 <- test[test$Expiration.Date == data.unique[1],]
colnames(inv.batch1)[colnames(inv.batch1) == "Quantity"] <- "value"
test.cast1 <- dcast(data = inv.batch1, formula = Days.To.Expiry ~ Expiration.Date)
test.cast1 <- test.cast1[order(test.cast1$Days.To.Expiry, decreasing = TRUE),]
# colnames(test)[colnames(test) == "Quantity"] <- "value"
# test.cast <- dcast(data = test, formula = Date ~ Expiration.Date)
# test.cast <- merge(x = test.cast, y = test, by = "Date", all.x = TRUE)
# test.cast <- subset(test.cast, select = -c(SKU, value, Expiration.Date, Expiration.Text))
# test.cast <- test.cast[,c(ncol(test.cast), 2:(ncol(test.cast) - 1))]
p <- plot_ly(test.cast1, x = test.cast1[[1]], y = test.cast1[[2]], name = as.character(data.unique[1]), type = 'scatter', mode = 'lines') %>%
layout(xaxis = list(autorange = "reversed", title = "Days to expiry"))
# add_trace(y = test.cast[[8]], name = 'trace 1', mode = 'lines') %>%
# add_trace(y = test.cast[[9]], name = 'trace 2', mode = 'lines') %>%
# Add the remaining batches
for (i in 2:length(data.unique)){
inv.batch <- test[test$Expiration.Date == data.unique[i],]
colnames(inv.batch)[colnames(inv.batch) == "Quantity"] <- "value"
test.cast <- dcast(data = inv.batch, formula = Days.To.Expiry ~ Expiration.Date)
test.cast <- test.cast[order(test.cast$Days.To.Expiry, decreasing = TRUE),]
p <- add_trace(p, x = test.cast[[1]], y = test.cast[[2]], name = as.character(data.unique[i]), mode = 'lines')
}
plot.list <- list()
plot.list[[1]] <- p
## Next SKUs
for (i in 2:length(sku.list)){
test <- subset(inventory, SKU==sku.list[i])
test <- test[order(test$Expiration.Date, test$Date, decreasing = F),]
data.unique <- unique(test$Expiration.Date)
# Draw the first batch
inv.batch1 <- test[test$Expiration.Date == data.unique[1],]
colnames(inv.batch1)[colnames(inv.batch1) == "Quantity"] <- "value"
test.cast1 <- dcast(data = inv.batch1, formula = Days.To.Expiry ~ Expiration.Date)
test.cast1 <- test.cast1[order(test.cast1$Days.To.Expiry, decreasing = TRUE),]
# colnames(test)[colnames(test) == "Quantity"] <- "value"
# test.cast <- dcast(data = test, formula = Date ~ Expiration.Date)
# test.cast <- merge(x = test.cast, y = test, by = "Date", all.x = TRUE)
# test.cast <- subset(test.cast, select = -c(SKU, value, Expiration.Date, Expiration.Text))
# test.cast <- test.cast[,c(ncol(test.cast), 2:(ncol(test.cast) - 1))]
p1 <- plot_ly(test.cast1, x = test.cast1[[1]], y = test.cast1[[2]], name = as.character(data.unique[1]), type = 'scatter', mode = 'lines') %>%
layout(xaxis = list(autorange = "reversed", title = "Days to expiry"))
# add_trace(y = test.cast[[8]], name = 'trace 1', mode = 'lines') %>%
# add_trace(y = test.cast[[9]], name = 'trace 2', mode = 'lines') %>%
# Add the remaining batches
for (j in 2:length(data.unique)){
inv.batch <- test[test$Expiration.Date == data.unique[j],]
colnames(inv.batch)[colnames(inv.batch) == "Quantity"] <- "value"
test.cast <- dcast(data = inv.batch, formula = Days.To.Expiry ~ Expiration.Date)
test.cast <- test.cast[order(test.cast$Days.To.Expiry, decreasing = TRUE),]
p1 <- add_trace(p1, x = test.cast[[1]], y = test.cast[[2]], name = as.character(data.unique[i]), mode = 'lines')
}
plot.list[[i]] <- p1
}
subplot(plot.list) %>% layout(dragmode = "select")
library(plotly)
library(dplyr)
sku.list <- unique(inventory$SKU)
## First SKU
test <- subset(inventory, SKU==sku.list[1])
test <- test[order(test$Expiration.Date, test$Date, decreasing = F),]
data.unique <- unique(test$Expiration.Date)
# Draw the first batch
inv.batch1 <- test[test$Expiration.Date == data.unique[1],]
colnames(inv.batch1)[colnames(inv.batch1) == "Quantity"] <- "value"
test.cast1 <- dcast(data = inv.batch1, formula = Days.To.Expiry ~ Expiration.Date)
test.cast1 <- test.cast1[order(test.cast1$Days.To.Expiry, decreasing = TRUE),]
# colnames(test)[colnames(test) == "Quantity"] <- "value"
# test.cast <- dcast(data = test, formula = Date ~ Expiration.Date)
# test.cast <- merge(x = test.cast, y = test, by = "Date", all.x = TRUE)
# test.cast <- subset(test.cast, select = -c(SKU, value, Expiration.Date, Expiration.Text))
# test.cast <- test.cast[,c(ncol(test.cast), 2:(ncol(test.cast) - 1))]
p <- plot_ly(test.cast1, x = test.cast1[[1]], y = test.cast1[[2]], name = as.character(data.unique[1]), type = 'scatter', mode = 'lines') %>%
layout(xaxis = list(autorange = "reversed", title = "Days to expiry"))
# add_trace(y = test.cast[[8]], name = 'trace 1', mode = 'lines') %>%
# add_trace(y = test.cast[[9]], name = 'trace 2', mode = 'lines') %>%
# Add the remaining batches
for (i in 2:length(data.unique)){
inv.batch <- test[test$Expiration.Date == data.unique[i],]
colnames(inv.batch)[colnames(inv.batch) == "Quantity"] <- "value"
test.cast <- dcast(data = inv.batch, formula = Days.To.Expiry ~ Expiration.Date)
test.cast <- test.cast[order(test.cast$Days.To.Expiry, decreasing = TRUE),]
p <- add_trace(p, x = test.cast[[1]], y = test.cast[[2]], name = as.character(data.unique[i]), mode = 'lines')
}
plot.list <- list()
plot.list[[1]] <- p
## Next SKUs
for (i in 2:length(sku.list)){
test <- subset(inventory, SKU==sku.list[i])
test <- test[order(test$Expiration.Date, test$Date, decreasing = F),]
data.unique <- unique(test$Expiration.Date)
# Draw the first batch
inv.batch1 <- test[test$Expiration.Date == data.unique[1],]
colnames(inv.batch1)[colnames(inv.batch1) == "Quantity"] <- "value"
test.cast1 <- dcast(data = inv.batch1, formula = Days.To.Expiry ~ Expiration.Date)
test.cast1 <- test.cast1[order(test.cast1$Days.To.Expiry, decreasing = TRUE),]
# colnames(test)[colnames(test) == "Quantity"] <- "value"
# test.cast <- dcast(data = test, formula = Date ~ Expiration.Date)
# test.cast <- merge(x = test.cast, y = test, by = "Date", all.x = TRUE)
# test.cast <- subset(test.cast, select = -c(SKU, value, Expiration.Date, Expiration.Text))
# test.cast <- test.cast[,c(ncol(test.cast), 2:(ncol(test.cast) - 1))]
p1 <- plot_ly(test.cast1, x = test.cast1[[1]], y = test.cast1[[2]], name = as.character(data.unique[1]), type = 'scatter', mode = 'lines') %>%
layout(xaxis = list(autorange = "reversed", title = "Days to expiry"))
# add_trace(y = test.cast[[8]], name = 'trace 1', mode = 'lines') %>%
# add_trace(y = test.cast[[9]], name = 'trace 2', mode = 'lines') %>%
# Add the remaining batches
for (j in 2:length(data.unique)){
inv.batch <- test[test$Expiration.Date == data.unique[j],]
colnames(inv.batch)[colnames(inv.batch) == "Quantity"] <- "value"
test.cast <- dcast(data = inv.batch, formula = Days.To.Expiry ~ Expiration.Date)
test.cast <- test.cast[order(test.cast$Days.To.Expiry, decreasing = TRUE),]
p1 <- add_trace(p1, x = test.cast[[1]], y = test.cast[[2]], name = as.character(data.unique[i]), mode = 'lines')
}
plot.list[[i]] <- p1
}
subplot(plot.list) %>% layout(dragmode = "select")
library(reshape2)
sku.list <- unique(inventory$SKU)
## First SKU
test <- subset(inventory, SKU==sku.list[1])
test <- test[order(test$Expiration.Date, test$Date, decreasing = F),]
data.unique <- unique(test$Expiration.Date)
# Draw the first batch
inv.batch1 <- test[test$Expiration.Date == data.unique[1],]
colnames(inv.batch1)[colnames(inv.batch1) == "Quantity"] <- "value"
test.cast1 <- dcast(data = inv.batch1, formula = Days.To.Expiry ~ Expiration.Date)
test.cast1 <- test.cast1[order(test.cast1$Days.To.Expiry, decreasing = TRUE),]
# colnames(test)[colnames(test) == "Quantity"] <- "value"
# test.cast <- dcast(data = test, formula = Date ~ Expiration.Date)
# test.cast <- merge(x = test.cast, y = test, by = "Date", all.x = TRUE)
# test.cast <- subset(test.cast, select = -c(SKU, value, Expiration.Date, Expiration.Text))
# test.cast <- test.cast[,c(ncol(test.cast), 2:(ncol(test.cast) - 1))]
p <- plot_ly(test.cast1, x = test.cast1[[1]], y = test.cast1[[2]], name = as.character(data.unique[1]), type = 'scatter', mode = 'lines') %>%
layout(xaxis = list(autorange = "reversed", title = "Days to expiry"))
# add_trace(y = test.cast[[8]], name = 'trace 1', mode = 'lines') %>%
# add_trace(y = test.cast[[9]], name = 'trace 2', mode = 'lines') %>%
# Add the remaining batches
for (i in 2:length(data.unique)){
inv.batch <- test[test$Expiration.Date == data.unique[i],]
colnames(inv.batch)[colnames(inv.batch) == "Quantity"] <- "value"
test.cast <- dcast(data = inv.batch, formula = Days.To.Expiry ~ Expiration.Date)
test.cast <- test.cast[order(test.cast$Days.To.Expiry, decreasing = TRUE),]
p <- add_trace(p, x = test.cast[[1]], y = test.cast[[2]], name = as.character(data.unique[i]), mode = 'lines')
}
plot.list <- list()
plot.list[[1]] <- p
## Next SKUs
for (i in 2:length(sku.list)){
test <- subset(inventory, SKU==sku.list[i])
test <- test[order(test$Expiration.Date, test$Date, decreasing = F),]
data.unique <- unique(test$Expiration.Date)
# Draw the first batch
inv.batch1 <- test[test$Expiration.Date == data.unique[1],]
colnames(inv.batch1)[colnames(inv.batch1) == "Quantity"] <- "value"
test.cast1 <- dcast(data = inv.batch1, formula = Days.To.Expiry ~ Expiration.Date)
test.cast1 <- test.cast1[order(test.cast1$Days.To.Expiry, decreasing = TRUE),]
# colnames(test)[colnames(test) == "Quantity"] <- "value"
# test.cast <- dcast(data = test, formula = Date ~ Expiration.Date)
# test.cast <- merge(x = test.cast, y = test, by = "Date", all.x = TRUE)
# test.cast <- subset(test.cast, select = -c(SKU, value, Expiration.Date, Expiration.Text))
# test.cast <- test.cast[,c(ncol(test.cast), 2:(ncol(test.cast) - 1))]
p1 <- plot_ly(test.cast1, x = test.cast1[[1]], y = test.cast1[[2]], name = as.character(data.unique[1]), type = 'scatter', mode = 'lines') %>%
layout(xaxis = list(autorange = "reversed", title = "Days to expiry"))
# add_trace(y = test.cast[[8]], name = 'trace 1', mode = 'lines') %>%
# add_trace(y = test.cast[[9]], name = 'trace 2', mode = 'lines') %>%
# Add the remaining batches
for (j in 2:length(data.unique)){
inv.batch <- test[test$Expiration.Date == data.unique[j],]
colnames(inv.batch)[colnames(inv.batch) == "Quantity"] <- "value"
test.cast <- dcast(data = inv.batch, formula = Days.To.Expiry ~ Expiration.Date)
test.cast <- test.cast[order(test.cast$Days.To.Expiry, decreasing = TRUE),]
p1 <- add_trace(p1, x = test.cast[[1]], y = test.cast[[2]], name = as.character(data.unique[i]), mode = 'lines')
}
plot.list[[i]] <- p1
}
subplot(plot.list) %>% layout(dragmode = "select")
source('/run/media/linhnguyen/DATA/Google Drive/R development/Inventory charts/Inventory stacked area chart_WIP.R', echo=TRUE)
subplot(plot.list, nrows = 15) %>% layout(dragmode = "select")
View(inventory)
test1 <- subset(inventory, select = -c(112991, 114511))
View(test1)
View(inventory)
help(subset)
test1 <- subset(inventory, select != c(112991, 114511))
test1 <- subset(inventory, SKU != c(112991, 114511))
View(test1)
View(test1)
help(mutate)
test1 <- filter(inventory, SKU %in% -c(112991, 114511))
test1 <- filter(inventory, SKU %in% c(112991, 114511))
View(test1)
test1 <- filter(inventory, SKU %notin% c(112991, 114511))
test1 <- filter(inventory, -(SKU %in% c(112991, 114511)))
test1 <- filter(inventory, SKU %in% -c(112991, 114511))
View(inventory)
test1 <- filter(inventory, !SKU %in% c(112991, 114511))
View(test1)
